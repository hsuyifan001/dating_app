import 'package:auto_size_text/auto_size_text.dart';
import 'package:dropdown_search/dropdown_search.dart';
import 'package:firebase_storage/firebase_storage.dart';
// import 'package:dating_app/profile_setup_page.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import '../main.dart';
import 'dart:io';
import 'package:dating_app/constants/data_constants.dart';

class AccountPage extends StatefulWidget {
  const AccountPage({super.key});

  @override
  State<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  final nameController = TextEditingController();
  final bioController = TextEditingController();
  final birthdayController = TextEditingController();
  final user = FirebaseAuth.instance.currentUser;
  String email = '';
  String? photoURL ;
  List<String> tags = [];
  String gender = '';
  String? genderDetail;
  String orientation = '';
  String? mbti;
  String? zodiac;
  String school = '';
  String selfIntro = '';
  bool isLoading = true;

  // Êñ∞Â¢ûÁöÑËÆäÊï∏ÔºåÂæû Firebase ËÆÄÂèñ
  Set<String> habits = {};
  String? educationLevels;
  String? department;
  bool? matchSameDepartment;
  Set<String> matchGender = {};
  Set<String> matchSchools = {};
  String height = '';

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final doc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
    if (doc.exists) {
      final data = doc.data()!;

      // Ê∑ªÂä† print ‰æÜÊ™¢Êü• data ÁöÑÂÖßÂÆπ
      print('Firebase data keys: ${data.keys.toList()}');  // Âç∞Âá∫ÊâÄÊúâÊ¨Ñ‰ΩçÂêçÁ®±
      print('matchSameDepartment: ${data['matchSameDepartment']}');

      nameController.text = data['name'] ?? '';
      birthdayController.text = data['birthday'] ?? '';
      bioController.text = data['bio'] ?? '';
      email = data['email'] ?? user.email ?? '';
      photoURL = data['photoUrl']  ?? '';
      tags = List<String>.from(data['tags'] ?? []);
      gender = data['gender'] ?? '';
      genderDetail = data['genderDetail'];
      orientation = data['orientation'] ?? '';
      mbti = data['mbti'];
      zodiac = data['zodiac'];
      school = data['school'] ?? '';
      selfIntro = data['selfIntro'] ?? '';

      // Êñ∞Â¢ûËÆäÊï∏ÁöÑËÆÄÂèñ
      habits = Set<String>.from(data['habits'] ?? []);
      educationLevels = data['educationLevels'];
      department = data['department'];
      matchSameDepartment = data['matchSameDepartment'];
      matchGender = Set<String>.from(data['matchGender'] ?? []);
      matchSchools = Set<String>.from(data['matchSchools'] ?? []);
      height = data['height'] ?? '';
    }

    setState(() {
      isLoading = false;
    });
  }

  Future<void> _saveProfile() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    await FirebaseFirestore.instance.collection('users').doc(user.uid).update({
      'name': nameController.text.trim(),
      'bio': bioController.text.trim(),
      'birthday': birthdayController.text.trim(),
      'mbti': mbti,
      'zodiac': zodiac,
      'tags': tags,
    });

    if (context.mounted) {
      Navigator.pop(context);
      // ScaffoldMessenger.of(context).showSnackBar(
      //   const SnackBar(content: Text('ÂÄã‰∫∫Ë≥áÊñôÂ∑≤Êõ¥Êñ∞')),
      // );
    }
  }

  Future<void> _logout() async {
    await FirebaseAuth.instance.signOut();
    await GoogleSignIn().signOut();
    if (context.mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => const WelcomePage()),
        (route) => false,
      );
    }
  }

  void showEditBottomSheet(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      useSafeArea: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
      ),
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Padding(
              padding: EdgeInsets.only(
                left: 24,
                right: 24,
                top: 24,
                bottom: MediaQuery.of(context).viewInsets.bottom + 24,
              ),
              child: ListView(
                children: [
                  const Text('Á∑®ËºØÂÄã‰∫∫Ë≥áÊñô',
                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  TextField(
                    controller: nameController,
                    decoration: const InputDecoration(labelText: 'ÂêçÁ®±'),
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: bioController,
                    decoration: const InputDecoration(labelText: 'Á∞°‰ªã'),
                    maxLines: 3,
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: birthdayController,
                    readOnly: true,
                    onTap: () async {
                      final picked = await showDatePicker(
                        context: context,
                        initialDate: DateTime.now().subtract(const Duration(days: 365 * 20)),
                        firstDate: DateTime(1900),
                        lastDate: DateTime.now(),
                      );
                      if (picked != null) {
                        birthdayController.text =
                            '${picked.year}/${picked.month.toString().padLeft(2, '0')}/${picked.day.toString().padLeft(2, '0')}';
                      }
                    },
                    decoration: const InputDecoration(labelText: 'ÁîüÊó•'),
                  ),
                  const SizedBox(height: 16),
                  DropdownButtonFormField<String>(
                    value: mbti,
                    items: mbtiList.map((type) => DropdownMenuItem(
                      value: type,
                      child: Text(type),
                    )).toList(),
                    onChanged: (value) => setModalState(() => mbti = value),
                    decoration: const InputDecoration(labelText: 'MBTI'),
                  ),
                  const SizedBox(height: 16),
                  DropdownButtonFormField<String>(
                    value: zodiac,
                    items: zodiacList.map((sign) => DropdownMenuItem(
                      value: sign,
                      child: Text(sign),
                    )).toList(),
                    onChanged: (value) => setModalState(() => zodiac = value),
                    decoration: const InputDecoration(labelText: 'ÊòüÂ∫ß'),
                  ),
                  const SizedBox(height: 16),
                  Wrap(
                    spacing: 4,
                    children: [
                      for (final tag in tags)
                        Chip(
                          label: Text(tag),
                          onDeleted: () {
                            setState(() => tags.remove(tag));
                            setModalState(() {});
                          },
                        ),
                      ActionChip(
                        avatar: const Icon(Icons.add),
                        label: const Text('Êñ∞Â¢û'),
                        onPressed: () {
                          final controller = TextEditingController();
                          showDialog(
                            context: context,
                            builder: (context) => AlertDialog(
                              title: const Text('Êñ∞Â¢ûÊ®ôÁ±§'),
                              content: TextField(controller: controller),
                              actions: [
                                TextButton(
                                  onPressed: () => Navigator.pop(context),
                                  child: const Text('ÂèñÊ∂à'),
                                ),
                                ElevatedButton(
                                  onPressed: () {
                                    final newTag = controller.text.trim();
                                    if (newTag.isNotEmpty && !tags.contains(newTag)) {
                                      setState(() => tags.add(newTag));
                                      setModalState(() {});
                                    }
                                    Navigator.pop(context);
                                  },
                                  child: const Text('Êñ∞Â¢û'),
                                ),
                              ],
                            ),
                          );
                        },
                      )
                    ],
                  ),
                  const SizedBox(height: 24),
                  ElevatedButton.icon(
                    onPressed: _saveProfile,
                    icon: const Icon(Icons.save),
                    label: const Text('ÂÑ≤Â≠òËÆäÊõ¥'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.pink,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 50),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  /*Widget buildProfileDetails() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (birthdayController.text.isNotEmpty)
          Text('üéÇ ÁîüÊó•Ôºö${birthdayController.text}'),
        if (gender.isNotEmpty)
          Text('üë§ ÊÄßÂà•Ôºö$gender${genderDetail != null ? "Ôºà$genderDetailÔºâ" : ""}'),
        if (orientation.isNotEmpty) Text('üåà ÊÄßÂêëÔºö$orientation'),
        if (mbti != null) Text('üß† MBTIÔºö$mbti'),
        if (zodiac != null) Text('‚ôà ÊòüÂ∫ßÔºö$zodiac'),
        if (school.isNotEmpty) Text('üè´ Â≠∏Ê†°Ôºö$school'),
        const SizedBox(height: 16),
      ],
    );
  }*/

  // Êñ∞Â¢ûÊ®ôÈ°åÂçÄÂ°äwidget
  Widget buildTitleBlock(double screenWidth, double screenHeight) {
    //double pxW(double px) => screenWidth * (px / 412);
    //double pxH(double px) => screenHeight * (px / 917);

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        const Expanded(
          flex: 1,
          child: Image(
            image: AssetImage('assets/qing.png'),
            width: 22,
          ),
        ),
        const SizedBox(width: 8),
        const Expanded(
          flex: 6,
          child: Text(
            "ÂÄã‰∫∫Ë≥áÊñô",
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Expanded(
          flex: 1,
          child: SizedBox(), // Êö´ÊôÇÂ∞á‰∏âÂÄãÈªûÈö±ËóèËµ∑‰æÜ
          // child: IconButton(
          //   icon: const Icon(Icons.more_vert, color: Colors.black),
          //   onPressed: () {
          //     // TODO: ÊêúÂ∞ãÊàñÊõ¥Â§öÂäüËÉΩ
          //   },
          // ),
        ),
      ],
    );
  }

  Widget buildSelfprofileBlock(double screenWidth, double screenHeight) {
  // Âü∫Ê∫ñÂ∞∫ÂØ∏ (Figma Áï´Â∏É)
  const baseWidth = 412.0;
  const baseHeight = 917.0;

  // ‰æùÊìöËû¢ÂπïÊØî‰æãË®àÁÆóÁ∏ÆÊîæ
  double w(double value) => value * screenWidth / baseWidth;
  double h(double value) => value * screenHeight / baseHeight;


  final double tagWidth = w(104);
  final double tagSpacing = w(12);


  // Ë®àÁÆó‰∏ÄÂàóÊúÄÂ§ö‰∏âÂÄãÊ®ôÁ±§Ôºå‰∏âÂÄãÊ®ôÁ±§Âä†ÂÖ©ÂÄãÈñìË∑ùÁöÑÂØ¨Â∫¶
  final double maxWrapWidth = tagWidth * 3 + tagSpacing * 2;

  final AutoSizeGroup myGroup = AutoSizeGroup();
  return SingleChildScrollView(
    padding: EdgeInsets.all(w(14)),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: h(10)),

        // È†≠ÂÉè + ÂßìÂêç + icon ÁñäÂä†
        Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // È†≠ÂÉè
            Container(
              width: w(102),
              height: w(102),
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(
                  color: const Color.fromRGBO(255, 200, 202, 1),
                  width: 5,
                ),
              ),
              child: CircleAvatar(
                backgroundImage: (photoURL != null && photoURL!.isNotEmpty)
                    ? NetworkImage(photoURL!)
                    : const AssetImage('assets/match_default.jpg') as ImageProvider,
                backgroundColor: Colors.transparent,
              ),
            ),

            SizedBox(width: w(15)),

            // ÂßìÂêçÂçÄÂüüÔºåExpanded ‰øùË≠â‰∏çË∂ÖÂá∫ÂèØÁî®ÂØ¨Â∫¶
            Expanded(
              child: SizedBox(
                height: w(102),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    child: Text(
                      nameController.text.isNotEmpty
                          ? nameController.text
                          : 'Êú™Ë®≠ÂÆöÂêçÁ®±',
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                      style: const TextStyle(
                        fontFamily: 'Kiwi Maru',
                        fontWeight: FontWeight.w500,
                        fontSize: 24,
                        color: Colors.black,
                      ),
                    ),
                  ),
                ),
              ),
            ),

            // iconÔºåÂõ∫ÂÆöÂ§ßÂ∞è‰∏¶ÊîæÂú®RowÂè≥ÂÅ¥
            SizedBox(
              width: w(102), // ÂèØ‰æùÈúÄÊ±ÇÂæÆË™ø
              height: w(102),
              child: Transform.rotate(
                angle: 14.53 * 3.1415926535 / 180,
                child: Image.asset(
                  'assets/icon.png',
                  fit: BoxFit.contain,
                ),
              ),
            ),
          ],
        ),


        SizedBox(height: h(60)),

        Transform.translate(
          offset: Offset( w(20) , 0), // ÂêëÂ∑¶ÁßªÂãï5ÂÉèÁ¥†

          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(
                height: h(30), // ‰Ω†ÂèØ‰ª•Ê†πÊìöÈúÄË¶ÅË™øÊï¥Â§ßÂ∞è
                width: w(300),
                 child: AutoSizeText(
                   'Â≠∏Ê†°Ôºö$school${school.isNotEmpty ? '' : 'Â∞öÊú™Â°´ÂØ´'}',
                   maxLines: 1,
                   style: const TextStyle(
                     fontFamily: 'Kiwi Maru',
                     fontWeight: FontWeight.w500,
                     fontSize: 30, // ÊúÄÂ§ßÂ≠óÁ¥ö
                     color: Colors.black,
                   ),
                   minFontSize: 16, // ÊúÄÂ∞èÂ≠óÁ¥öÔºåÈÅøÂÖçÈÅéÂ∞è
                   overflow: TextOverflow.ellipsis,
                   group: myGroup, // üëà ÊîæÈÄ≤Âêå‰∏ÄÂÄã group
                 ),
              ),

              SizedBox(height: h(8)),

              SizedBox(
                height: h(30),
                width: w(300),
                child: AutoSizeText(
                  'ÊÄßÂà•Ôºö$gender${gender.isNotEmpty ? '' : 'Â∞öÊú™Â°´ÂØ´'}',
                  maxLines: 1,
                  style: const TextStyle(
                    fontFamily: 'Kiwi Maru',
                    fontWeight: FontWeight.w500,
                    fontSize: 30,
                    color: Colors.black,
                  ),
                  minFontSize: 16,
                  overflow: TextOverflow.ellipsis,
                  group: myGroup, // üëà ÊîæÈÄ≤Âêå‰∏ÄÂÄã group
                ),
              ),

              SizedBox(height: h(8)),

              SizedBox(
                height: h(30),
                width: w(300),
                child: AutoSizeText(
                  'Ëá™Êàë‰ªãÁ¥π:',
                  maxLines: 1,
                  style: const TextStyle(
                    fontFamily: 'Kiwi Maru',
                    fontWeight: FontWeight.w500,
                    fontSize: 30,
                    color: Colors.black,
                  ),
                  minFontSize: 16,
                  overflow: TextOverflow.ellipsis,
                  group: myGroup, // üëà ÊîæÈÄ≤Âêå‰∏ÄÂÄã group
                ),
              ),

              SizedBox(height: h(8)),

              SizedBox(
                height: h(30), // Ëá™Êàë‰ªãÁ¥πÂÖßÂÆπÂèØ‰ª•Áî®ËºÉÈ´òÈ´òÂ∫¶Âõ†Â≠óÊï∏ËºÉÂ§ö
                width: w(300),
                child: AutoSizeText(
                  '$selfIntro${selfIntro.isNotEmpty ? '' : 'Â∞öÊú™Â°´ÂØ´'}',
                  maxLines: 1,
                  style: const TextStyle(
                      fontSize: 20,
                      color: Colors.black87,
                      fontWeight: FontWeight.w500,
                    ),
                  minFontSize: 16,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
        ),


        SizedBox(height: h(30)),

        // Ê®ôÁ±§ (Wrap Ê®°Êì¨ Figma ÁöÑÊéíÂàó)
        Align(
          alignment: Alignment.topLeft,
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: tagSpacing / 2),
            child: Container(
              width: maxWrapWidth,
              child: Wrap(
                alignment: WrapAlignment.start,
                spacing: tagSpacing,
                runSpacing: h(8),
                children: [
                  for (int i = 0; i < (tags.length > 6 ? 6 : tags.length); i++)
                    Container(
                      width: tagWidth,
                      height: h(39),
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(color: Colors.pink.shade100, width: 1.5),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.pink.shade50,
                            blurRadius: 2,
                            offset: const Offset(0, 1),
                          ),
                        ],
                      ),
                      child: FittedBox(
                        fit: BoxFit.scaleDown,
                        child: Text(
                          "  "+tags[i].toString()+"  ",
                          
                          style: const TextStyle(
                            color: Colors.pink,
                            fontWeight: FontWeight.w500,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),


        SizedBox(height: h(60)),

        // ÊåâÈàïÂçÄ (Á∑®ËºØ / ÁôªÂá∫)
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            SizedBox(
              width: w(156),
              height: h(55),
              child: ElevatedButton(
                onPressed: () async {
                  await Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => SimpleProfileEditPage(
                        name: nameController.text,
                        birthday: birthdayController.text,
                        mbti: mbti,
                        zodiac: zodiac,
                        selfIntro: selfIntro,
                        tags: tags,
                        selectedHabits: habits,  // Âæû Firebase ËÆÄÂèñ
                        selectedMBTI: mbti,
                        selectedZodiac: zodiac,
                        selectededucationLevels: educationLevels,
                        selectedDepartment: department,
                        matchSameDepartment: matchSameDepartment,
                        gender: gender,
                        matchGender: matchGender,
                        matchSchools: matchSchools,
                        height: height,
                        photoUrl: photoURL,
                        onSave: (data) async {
                          // ÂØ´Âõû Firebase
                          await FirebaseFirestore.instance.collection('users').doc(user!.uid).update(data);
                          setState(() {
                            // Êõ¥Êñ∞Êú¨Âú∞ËÆäÊï∏
                            nameController.text = data['name'] ?? '';
                            birthdayController.text = data['birthday'] ?? '';
                            selfIntro = data['selfIntro'] ?? '';
                            habits = Set<String>.from(data['habits'] ?? []);
                            mbti = data['mbti'];
                            zodiac = data['zodiac'];
                            educationLevels = data['educationLevels'];
                            department = data['department'];
                            matchSameDepartment = data['matchSameDepartment'];
                            gender = data['gender'] ?? '';
                            matchGender = Set<String>.from(data['matchGender'] ?? []);
                            matchSchools = Set<String>.from(data['matchSchools'] ?? []);
                            height = data['height'] ?? '';
                            photoURL = data['photoUrl'];
                            tags = List<String>.from(data['tags'] ?? []);
                            mbti = data['mbti'];  // Êõ¥Êñ∞ mbti
                            zodiac = data['zodiac'];  // Êõ¥Êñ∞ zodiac
                          });
                        },
                      ),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color.fromRGBO(255, 200, 202, 1),
                  foregroundColor: Colors.black,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                    side: const BorderSide(color: Colors.black, width: 2),
                  ),
                ),
                child: FittedBox(
                  fit: BoxFit.scaleDown,
                  child: Text(
                    'Á∑®ËºØÂÄã‰∫∫Ë≥áÊñô',
                    style: TextStyle(
                      fontFamily: 'Kiwi Maru',
                      fontWeight: FontWeight.w500,
                      fontSize: 20,
                    ),
                  ),
                ),
              ),
            ),
            SizedBox(
              width: w(156),
              height: h(55),
              child: ElevatedButton(
                onPressed: _logout,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                    side: const BorderSide(color: Colors.black, width: 2),
                  ),
                ),
                child : FittedBox(
                  fit: BoxFit.scaleDown,
                  child: const Text(
                    'ÁôªÂá∫',
                    style: TextStyle(
                      color: Color.fromRGBO(246, 157, 158, 1),
                      fontFamily: 'Kiwi Maru',
                      fontWeight: FontWeight.w500,
                      fontSize: 20,
                    ),
                  ),
                ),
                
              ),
            ),
          ],
        ),
      ],
    ),
  );
}


  
  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    if (isLoading) return const Center(child: CircularProgressIndicator());

    return Scaffold(
      backgroundColor: Color(0xFCD3F8F3),
      body: Padding(
        padding: const EdgeInsets.fromLTRB(12, 48, 12, 12),
        child: Column(
          children: [
            // È†ÇÈÉ®Ê®ôÈ°åÂçÄÔºàÁ¨¨‰∫åÁµÑUIÈ¢®Ê†ºÔºâ
            Container(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
              decoration: BoxDecoration(
                color: Color(0xFFFFC8CA),
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: Colors.black, width: 1.5),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  )
                ],
              ),
              child: buildTitleBlock(screenWidth, screenHeight),
            ),

            const SizedBox(height: 12),

            // ËÅäÂ§©ÂÆ§ÂàóË°®Â§ñÂ±§Ë£ùÈ£æÂÆπÂô®ÔºàÁ¨¨‰∫åÁµÑUIÈ¢®Ê†ºÔºâ
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.black, width: 1.5),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.1),
                      blurRadius: 4,
                      offset: const Offset(0, 2),
                    )
                  ],
                ),
                child: buildSelfprofileBlock(screenWidth, screenHeight),
              ),
            ),
          ],
        ),
      )
    );
  }
}

class SimpleProfileEditPage extends StatefulWidget {
  final String name;
  final String birthday;
  final String? mbti;
  final String? zodiac;
  final String selfIntro;
  final List<String> tags;
  final Set<String> selectedHabits;
  final String? selectedMBTI;
  final String? selectedZodiac;
  final String? selectededucationLevels;
  final String? selectedDepartment;
  final bool? matchSameDepartment;
  final String gender;
  final Set<String> matchGender;
  final Set<String> matchSchools;
  final String height;
  final String? photoUrl;
  final ValueChanged<Map<String, dynamic>>? onSave;

  const SimpleProfileEditPage({
    super.key,
    required this.name,
    required this.birthday,
    required this.mbti,
    required this.zodiac,
    required this.selfIntro,
    required this.tags,
    required this.selectedHabits,
    required this.selectedMBTI,
    required this.selectedZodiac,
    required this.selectededucationLevels,
    required this.selectedDepartment,
    required this.matchSameDepartment,
    required this.gender,
    required this.matchGender,
    required this.matchSchools,
    required this.height,
    required this.photoUrl,
    this.onSave,
  });

  @override
  State<SimpleProfileEditPage> createState() => _SimpleProfileEditPageState();
}

class _SimpleProfileEditPageState extends State<SimpleProfileEditPage> {
  late TextEditingController nameController;
  late TextEditingController birthdayController;
  late TextEditingController selfIntroController;
  late TextEditingController heightController;
  File? _selectedImage;
  bool _isUploadingPhoto = false;
  String? _photoUrl;

  late Set<String> selectedHabits;
  late String? selectedMBTI;
  late String? selectedZodiac;
  late String? selectededucationLevels;
  late String? selectedDepartment;
  late bool? matchSameDepartment;
  late String gender;
  late Set<String> matchGender;
  late Set<String> matchSchools;
  late List<String> tags;

  final Map<String, bool> isInterestsExpanded = {
    'ÈÅãÂãï': false,
    'ÂØµÁâ©': false,
    'ÈõªÂΩ±': false,
  };

  @override
  void initState() {
    super.initState();
    nameController = TextEditingController(text: widget.name);
    birthdayController = TextEditingController(text: widget.birthday);
    selfIntroController = TextEditingController(text: widget.selfIntro);
    heightController = TextEditingController(text: widget.height);
    _photoUrl = widget.photoUrl;

    selectedHabits = Set<String>.from(widget.selectedHabits);
    selectedMBTI = widget.selectedMBTI;
    selectedZodiac = widget.selectedZodiac;
    selectededucationLevels = widget.selectededucationLevels;
    selectedDepartment = widget.selectedDepartment;
    matchSameDepartment = widget.matchSameDepartment;
    gender = widget.gender;
    matchGender = Set<String>.from(widget.matchGender);
    matchSchools = Set<String>.from(widget.matchSchools);
    tags = List<String>.from(widget.tags);

    // Ê†πÊìöÂ∑≤ÈÅ∏ËààË∂£ÂàùÂßãÂåñ isInterestsExpanded
    for (final interest in isInterestsExpanded.keys) {
      if (selectedHabits.contains(interest)) {
        isInterestsExpanded[interest] = true;
      }
    }

    print('matchSameDepartment: $matchSameDepartment');

    print('test matchGender:');
    for(final tmp in matchGender) {
      print(tmp);
    }
  }

  @override
  void dispose() {
    nameController.dispose();
    birthdayController.dispose();
    selfIntroController.dispose();
    heightController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Á∑®ËºØÂÄã‰∫∫Ë≥áÊñô')),
      body: GestureDetector(
        behavior: HitTestBehavior.opaque, // ËÆìÁ©∫ÁôΩËôï‰πüËÉΩÂÅµÊ∏¨ÈªûÊìä
        onTap: () {
          FocusScope.of(context).requestFocus(FocusNode()); // ÊòéÁ¢∫ÁßªÈô§ÁÑ¶Èªû
        },
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Â§ßÈ†≠ÁÖß
              const Text('Â§ßÈ†≠ÁÖß'),
              const SizedBox(height: 8),
              Center(  // Êñ∞Â¢û Center ‰æÜÊ©´ÂêëÁΩÆ‰∏≠Â§ßÈ†≠ÁÖß
                child: GestureDetector(
                  onTap: _pickImage,
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      Container(
                        width: 100,
                        height: 100,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          border: Border.all(color: Colors.blue, width: 2),
                        ),
                        child: CircleAvatar(
                          radius: 50,
                          backgroundImage: _selectedImage != null
                              ? FileImage(_selectedImage!)
                              : (_photoUrl != null ? NetworkImage(_photoUrl!) : null),
                          child: _selectedImage == null && _photoUrl == null
                              ? const Icon(Icons.add_a_photo)
                              : null,
                        ),
                      ),
                      if (_isUploadingPhoto) const CircularProgressIndicator(),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // ÂßìÂêç
              TextField(
                controller: nameController,
                decoration: const InputDecoration(labelText: 'ÂßìÂêç'),
              ),
              const SizedBox(height: 16),

              // ÊÄßÂà•
              const Text('ÊÄßÂà•'),
              const SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: ['Áî∑ÊÄß', 'Â•≥ÊÄß'].map((g) => OutlinedButton(
                  onPressed: () => setState(() => gender = g),
                  style: OutlinedButton.styleFrom(
                    backgroundColor: gender == g ? Colors.blue.shade100 : null,
                  ),
                  child: Text(g),
                )).toList(),
              ),
              const SizedBox(height: 16),

              // Ë¶ÅÈÖçÂ∞çÁöÑÊÄßÂà•
              const Text('Ë¶ÅÈÖçÂ∞çÁöÑÊÄßÂà•'),
              const SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: ['Áî∑ÊÄß', 'Â•≥ÊÄß'].map((g) => OutlinedButton(
                  onPressed: () {
                    setState(() {
                      if (matchGender.contains(g)) {
                        matchGender.remove(g);
                      } else {
                        matchGender.add(g);
                      }
                    });
                  },
                  style: OutlinedButton.styleFrom(
                    backgroundColor: matchGender.contains(g) ? Colors.blue.shade100 : null,
                  ),
                  child: Text(g),
                )).toList(),
              ),
              const SizedBox(height: 16),

              // Ë¶ÅÈÖçÂ∞çÁöÑÂ≠∏Ê†°
              const Text('Ë¶ÅÈÖçÂ∞çÁöÑÂ≠∏Ê†°'),
              const SizedBox(height: 8),
              _buildSchoolChoice('ÂúãÁ´ãÈôΩÊòé‰∫§ÈÄöÂ§ßÂ≠∏', 'NYCU'),
              const SizedBox(height: 8),
              _buildSchoolChoice('ÂúãÁ´ãÊ∏ÖËèØÂ§ßÂ≠∏', 'NTHU'),
              const SizedBox(height: 16),

              // tags
              const Text('ÂÄãÊÄßÂåñÊ®ôÁ±§'),
              const SizedBox(height: 8),
              GridView.count(
                crossAxisCount: 4, // ÊØèË°å4ÂÄã
                shrinkWrap: true,
                mainAxisSpacing: 12,
                crossAxisSpacing: 16,
                childAspectRatio: 1.7,
                physics: const NeverScrollableScrollPhysics(), // Á¶ÅÊ≠¢ÊªæÂãïÔºåÁî±Â§ñÈÉ®ÊéßÂà∂
                children: tagList.map((tag) {
                  final isSelected = tags.contains(tag);
                  return SizedBox(
                    height: 40,
                    child: ElevatedButton(
                      onPressed: () {
                        setState(() {
                          if (isSelected) {
                            tags.remove(tag);
                          } else {
                            tags.add(tag);
                          }
                        });
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: isSelected ? Colors.blue : Colors.white,
                        foregroundColor: isSelected ? Colors.white : Colors.black,
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(color: isSelected ? Colors.blue : Colors.grey),
                        ),
                      ),
                      child: Text(tag, textAlign: TextAlign.center, style: const TextStyle(fontSize: 12)),
                    ),
                  );
                }).toList(),
              ),
              const SizedBox(height: 16),

              // habits (ËààË∂£)
              const Text('ËààË∂£'),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: [
                  for (final tag in mainInterests) ...[
                    _buildInterestChip(tag),
                    if (isInterestsExpanded.containsKey(tag))  // Â¶ÇÊûúÈªû‰∫ÜÊúâÂ≠êÈÅ∏È†ÖÁöÑÔºåÊèíÂÖ•Â≠êÈ†ÖÊåâÈàïÔºàËºÉÂ∞èÔºåÊ°ÜËµ∑‰æÜÔºâ
                      if (isInterestsExpanded[tag] == true)
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          decoration: BoxDecoration(
                            color: const Color.fromARGB(51, 224, 201, 119), // Â∫ïËâ≤
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: Wrap(
                            spacing: 8,
                            runSpacing: 8,
                            children: interestsSubtags[tag]!.map((sub) {
                              return ChoiceChip(
                                label: Text(sub, style: const TextStyle(fontSize: 13)),
                                selected: selectedHabits.contains(sub),
                                onSelected: (selected) {
                                  setState(() {
                                    selected ? selectedHabits.add(sub) : selectedHabits.remove(sub);
                                  });
                                },
                                visualDensity: VisualDensity.compact,
                                padding: const EdgeInsets.symmetric(horizontal: 12),
                              );
                            }).toList(),
                          ),
                        ),
                  ]
                ],
              ),
              const SizedBox(height: 16),

              // mbti
              const Text('MBTI'),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                children: mbtiList.map((type) => ChoiceChip(
                  label: Text(type),
                  selected: selectedMBTI == type,
                  onSelected: (_) => setState(() => selectedMBTI = type),
                )).toList(),
              ),
              const SizedBox(height: 16),

              // ÊòüÂ∫ß
              const Text('ÊòüÂ∫ß'),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                children: zodiacList.map((sign) => ChoiceChip(
                  label: Text(sign),
                  selected: selectedZodiac == sign,
                  onSelected: (_) => setState(() => selectedZodiac = sign),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                )).toList(),
              ),
              const SizedBox(height: 16),

              // ÁîüÊó•
              TextField(
                controller: birthdayController,
                readOnly: true,
                onTap: () async {
                  final picked = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now().subtract(const Duration(days: 365 * 20)),
                    firstDate: DateTime(1900),
                    lastDate: DateTime.now(),
                  );
                  if (picked != null) {
                    birthdayController.text = '${picked.year}/${picked.month.toString().padLeft(2, '0')}/${picked.day.toString().padLeft(2, '0')}';
                  }
                },
                decoration: const InputDecoration(labelText: 'ÁîüÊó•'),
              ),
              const SizedBox(height: 16),

              // Ë∫´È´ò
              TextField(
                controller: heightController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(labelText: 'Ë∫´È´òÔºàÂÖ¨ÂàÜÔºâ'),
              ),
              const SizedBox(height: 16),

              // Âú®Â≠∏ÁãÄÊÖã
              const Text('Âú®Â≠∏ÁãÄÊÖã'),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                children: educationLevelsList.map((status) => ChoiceChip(
                  label: Text(status),
                  selected: selectededucationLevels == status,
                  onSelected: (_) => setState(() => selectededucationLevels = status),
                )).toList(),
              ),
              const SizedBox(height: 16),

              // Á≥ªÊâÄ
              DropdownSearch<String>(
                popupProps: PopupProps.menu(
                  showSearchBox: true, // ÂïüÁî®ÊêúÂ∞ãÊ¨Ñ
                  searchFieldProps: TextFieldProps(
                    decoration: InputDecoration(
                      hintText: 'Ëº∏ÂÖ•Á≥ªÊâÄÂêçÁ®±ÊêúÂ∞ã',
                      contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                  fit: FlexFit.loose, // Á¢∫‰øùÈÅ∏ÂñÆÈÅ©ÊáâÂÖßÂÆπ
                  constraints: BoxConstraints(maxHeight: 300), // ÈôêÂà∂ÈÅ∏ÂñÆÈ´òÂ∫¶
                ),
                items: departmentList, // ‰Ω†ÁöÑÁ≥ªÊâÄÂàóË°®
                selectedItem: selectedDepartment, // Áï∂ÂâçÈÅ∏ÊìáÁöÑÂÄº
                onChanged: (value) {
                  setState(() {
                    selectedDepartment = value!; // Êõ¥Êñ∞ÈÅ∏ÊìáÁöÑÂÄº
                  });
                },
                dropdownDecoratorProps: DropDownDecoratorProps(
                  dropdownSearchDecoration: InputDecoration(
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    hintText: 'Ë´ãÈÅ∏ÊìáÁ≥ªÊâÄ',
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // ÊòØÂê¶Êé®Ëñ¶ÂêåÁ≥ªÊâÄÁöÑ‰∫∫
              const Text('ÊòØÂê¶Êé®Ëñ¶ÂêåÁ≥ªÊâÄÁöÑ‰∫∫'),
              const SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  OutlinedButton(
                    onPressed: () => setState(() => matchSameDepartment = true),
                    style: OutlinedButton.styleFrom(
                      backgroundColor: matchSameDepartment == true ? Colors.blue.shade100 : null,
                    ),
                    child: const Text('ÊòØ'),
                  ),
                  OutlinedButton(
                    onPressed: () => setState(() => matchSameDepartment = false),
                    style: OutlinedButton.styleFrom(
                      backgroundColor: matchSameDepartment == false ? Colors.blue.shade100 : null,
                    ),
                    child: const Text('Âê¶'),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Ëá™Êàë‰ªãÁ¥π
              TextField(
                controller: selfIntroController,
                maxLines: 3,
                decoration: const InputDecoration(labelText: 'Ëá™Êàë‰ªãÁ¥π'),
              ),
              const SizedBox(height: 32),

              ElevatedButton(
                onPressed: () {
                  widget.onSave?.call({
                    'name': nameController.text.trim(),
                    'birthday': birthdayController.text.trim(),
                    'selfIntro': selfIntroController.text.trim(),
                    'habits': selectedHabits.toList(),
                    'mbti': selectedMBTI,
                    'zodiac': selectedZodiac,
                    'educationLevels': selectededucationLevels,
                    'department': selectedDepartment,
                    'matchSameDepartment': matchSameDepartment,
                    'gender': gender,
                    'matchGender': matchGender.toList(),
                    'matchSchools': matchSchools.toList(),
                    'height': heightController.text.trim(),
                    'photoUrl': _photoUrl,
                    'tags': tags,
                  });
                  Navigator.pop(context);
                },
                child: const Text('ÂÑ≤Â≠ò'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInterestChip(String tag) {
    final selected = selectedHabits.contains(tag);
    return ChoiceChip(
      label: Text(tag),
      selected: selected,
      onSelected: (selected) {
        setState(() {
          selected ? selectedHabits.add(tag) : selectedHabits.remove(tag);
          if (isInterestsExpanded.containsKey(tag)) {
            isInterestsExpanded[tag] = !isInterestsExpanded[tag]!;
            if (!selected) {
              for(final subtag in interestsSubtags[tag] ?? []) {
                if (selectedHabits.contains(subtag)) {
                  selectedHabits.remove(subtag);
                }
              }
            }
          }
        });
      },
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
    );
  }

  Widget _buildSchoolChoice(String label, String code) {
    final isSelected = matchSchools.contains(code);
    return ElevatedButton(
      onPressed: () {
        setState(() {
          if (isSelected) {
            matchSchools.remove(code);
          } else {
            matchSchools.add(code);
          }
        });
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: isSelected ? Colors.blue.shade100 : Colors.white,
      ),
      child: Text(label),
    );
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile == null) return;

    setState(() {
      _selectedImage = File(pickedFile.path);
      _isUploadingPhoto = true;
    });

    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return;

      final ref = FirebaseStorage.instance.ref().child('user_photos').child('${user.uid}.jpg');
      await ref.putFile(_selectedImage!);
      final url = await ref.getDownloadURL();

      setState(() {
        _photoUrl = url;
        _isUploadingPhoto = false;
      });
    } catch (e) {
      setState(() => _isUploadingPhoto = false);
    }
  }
}

extension on User {
  get data => null;
}
